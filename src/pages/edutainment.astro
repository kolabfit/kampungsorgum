---
import { getPermalink } from '~/utils/permalinks';
import Layout from '~/layouts/PageLayout.astro';
import LatestArticles from '~/components/widgets/LatestArticles.astro';

import Hero from '~/components/widgets/Hero.astro';

import { contentfulClient } from '~/lib/contentful';
import type { Asset, EntryFieldTypes } from 'contentful';

interface EdutainmentArticleType {
  contentTypeId: string;
  fields: {
    entryname: EntryFieldTypes.Text;
    foto: EntryFieldTypes.AssetLink;
    judul: EntryFieldTypes.Text;
    description: EntryFieldTypes.Text;
  };
}

// Fetch the entry and include linked assets
const entries = await contentfulClient.getEntries<EdutainmentArticleType>({
  content_type: 'edutimentPaketType',
});

function limitWords(text: string, wordLimit: number = 10): string {
  const words = text.split(' ');
  if (words.length > wordLimit) {
    return words.slice(0, wordLimit).join(' ') + '...';
  }
  return text;
}

const items = entries.items.map((item) => {
  
  const asset: Asset | undefined = entries.includes?.Asset?.find(
            (asset: Asset) => asset?.sys?.id === item?.fields?.foto?.sys?.id
          );

          // Safely access the image URL
          const imageURL: string | null = typeof asset?.fields?.file?.url === 'string' ? asset.fields.file.url : null;

  return {
    title: item.fields.judul,
    description: limitWords(item.fields.description, 15),
    href: getPermalink('/edutainment/' + item.fields.entryname),
    image: imageURL
  };
});

// Define the structure of the content type based on your provided fields
interface ProfileKampungSorgumType {
  contentTypeId: string;
  fields: {
    entryname: EntryFieldTypes.Text;
    juduledutiment: EntryFieldTypes.Text;
    captionedutiment: EntryFieldTypes.Text;
  };
}

const entriesType = await contentfulClient.getEntries<ProfileKampungSorgumType>({
  content_type: 'edutimentType',
  'fields.entryname': 'judulandcaption',
  limit: 1,
});

// Map the data to be used in the template
const profileEntry = entriesType.items[0]?.fields;

const juduledutiment = profileEntry?.juduledutiment;
const captionedutiment = profileEntry?.captionedutiment;

const metadata = {
  title: 'Edutainment',
};
---

<Layout metadata={metadata}>

  <!-- Hero Widget ******************* -->
  
  <Hero
    contentID='edutimentHeroType',
  >
    <Fragment slot="title">
      {juduledutiment}
    </Fragment>

    <Fragment slot="subtitle">
      {captionedutiment}
    </Fragment>

    <Fragment slot="bg">
      <div class="absolute inset-0 bg-blue-50 dark:bg-slate-800"></div>
    </Fragment>

    <!-- <Fragment slot="subtitle">
      <span class="hidden sm:inline">
        <span class="font-semibold">AstroWind</span> is a free, customizable and production-ready template for Astro 4.0
        + Tailwind CSS.</span
      >
      <span class="block mb-1 sm:hidden font-bold text-blue-600">AstroWind: Production-ready.</span>
      Suitable for Startups, Small Business, SaaS websites, Professional Portfolios, Marketing websites, Landing Pages &
      Blogs.
    </Fragment> -->
  </Hero>
  
  <!-- Articles Widget **************** -->

  <LatestArticles
    buttonText="Lihat Lebih Lanjut"
    columns={5}
    id="blog"
    title="Edutainment Kampung Sorgum"
    subtitle="Temukan berbagai edukasi menarik yang kami tawarkan untuk memenuhi kebutuhan Anda."
    items={[
      ...items
    ]}
  >
    <Fragment slot="bg">
      <div class="absolute inset-0 bg-blue-50 dark:bg-slate-800"></div>
    </Fragment>
  </LatestArticles>
  
</Layout>
