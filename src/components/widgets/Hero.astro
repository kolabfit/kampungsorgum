---
// Your imports here
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';

import type { Hero as Props } from '~/types';
import { contentfulClient } from "~/lib/contentful";
import type { EntryFieldTypes } from "contentful";

// Function to get the image URL from the "includes" section of the response
function getImageURLFromID(includes, assetID) {
  const asset = includes.Asset.find((asset) => asset.sys.id === assetID);
  return asset ? asset.fields.file.url : null;  // Return the URL or null if not found
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  id,
  contentID = "edusorgumHeroType",
  bg = await Astro.slots.render('bg'),
} = Astro.props;

interface ArticleTypeID {
  contentTypeId: string; 
  fields: {
    title: EntryFieldTypes.Text;
    content: EntryFieldTypes.RichText;
    foto: EntryFieldTypes.AssetLink;
  }
}

// Fetch the entry and include linked assets
const entries = await contentfulClient.getEntries<ArticleTypeID>({
  content_type: contentID,
  include: 1,
});

---

<section class="relative md:-mt-[76px] not-prose bg-slate-100 dark:bg-slate-900" {...id ? { id } : {}}>
  <div class="carousel-container relative overflow-hidden h-screen">
    <div class="carousel-slides">
      {entries.items.map((item) => {
        // Get the image URL from the "foto" field
        const imageURL = getImageURLFromID(entries.includes, item.fields.foto.sys.id);

        // Render the image if the URL exists
        return imageURL && (
          <div class="carousel-slide">
            <Image 
              sizes={'100%'} 
              class="dynamic-image rounded-md" 
              loading="eager" 
              src={imageURL}
              alt="Hero image"
            />
          </div>
        );
      })}
    </div>
    <!-- <button class="carousel-button prev" onclick="moveSlide(-1)">&#10094;</button>
    <button class="carousel-button next" onclick="moveSlide(1)">&#10095;</button> -->
  </div>

  <!-- Title and Content Overlay -->
  <div class="overlay-content absolute inset-0 flex items-center justify-center text-center z-20">
    <div class="content-container max-w-5xl mx-auto">
      {
        tagline && (
          <p class="text-base text-secondary dark:text-blue-200 font-bold tracking-wide uppercase" set:html={tagline} />
        )
      }
      {
        title && (
          <h1
            class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading dark:text-gray-200"
            set:html={title}
          />
        )
      }
      {subtitle && <p class="text-xl mb-6 dark:text-slate-300" set:html={subtitle} />}
      {
        actions && (
          <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4">
            {Array.isArray(actions) ? (
              actions.map((action) => (
                <div class="flex w-full sm:w-auto">
                  <Button {...(action || {})} class="w-full sm:mb-0" />
                </div>
              ))
            ) : (
              <Fragment set:html={actions} />
            )}
          </div>
        )
      }
      {content && <Fragment set:html={content} />}
    </div>
  </div>

  <style>
    .carousel-container {
      position: relative;
      height: 70vh;
      overflow: hidden;
    }
    .carousel-slides {
      display: flex;
      transition: transform 0.5s ease-in-out;
      height: 100%;
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
    }
    .carousel-slide {
      min-width: 100%;
      height: 100%; /* Ensure each slide covers the full height of the screen */
      background-size: cover;
      background-position: center;
      position: relative;
    }
    .overlay-content {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      text-align: center;
      color: white;
      z-index: 10;
      background: rgba(0, 0, 0, 0.5); /* Darken the background for better text readability */
    }
    .carousel-button {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      background: rgba(255, 255, 255, 0.7);
      border: none;
      padding: 10px;
      cursor: pointer;
      z-index: 10; /* Ensure buttons are above the carousel */
    }
    .prev {
      left: 10px;
    }
    .next {
      right: 10px;
    }
  </style>

  <script is:inline data-astro-rerun>
    setPage();

    let currentIndex = 0;
    let autoScrollInterval;

    function moveSlide(direction) {
      const slides = document.querySelector('.carousel-slides');
      const totalSlides = slides.children.length;

      currentIndex = (currentIndex + direction + totalSlides) % totalSlides;
      slides.style.transform = `translateX(-${currentIndex * 100}%)`;
    }

    function stopAutoScroll() {
      clearInterval(autoScrollInterval);
    }

    function autoScrollSlides() {
      stopAutoScroll();
      autoScrollInterval = setInterval(() => {
        moveSlide(1);
      }, 5000); // 5 seconds interval for automatic scrolling
    }

    function setPage() {
      const images = document.querySelectorAll('.dynamic-image');
      const screenWidth = screen.width;
      const screenHeight = screen.height;

      images.forEach((img) => {
        img.width = screenWidth;
        img.style.maxWidth = `${screenWidth}px`; // Set max-width to screen width
        img.height = screenHeight; // Ensure the image covers the full height of the screen
        img.style.height = `${screenHeight}px`; // Set height to screen height
        img.style.maxHeight = `${screenHeight}px`; // Set max-width to screen width
      });
    }

    document.addEventListener('astro:page-load', () => {
      setPage();
      autoScrollSlides();
    });

    window.addEventListener('resize', setPage);
    window.addEventListener('load', function () {
      setPage();
      autoScrollSlides();
    });

    document.querySelectorAll('.carousel-button').forEach((button) => {
      button.addEventListener('click', () => {
        clearInterval(autoScrollInterval);
        autoScrollSlides();
      });
    });
  </script>
</section>
